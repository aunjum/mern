import React, {useState, useEffect, useRef} from 'react'
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TablePagination from '@mui/material/TablePagination';
import TableRow from '@mui/material/TableRow';
import ButtonGroup from '@mui/material/ButtonGroup';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import styles from './UserDashboardTable.module.css';
import CreateOrganization from '../../../OrganizationComponents/CreateOrganization';
import OrganaizationModal from '../../../OrganizationComponents/OrganizationModal';
import FetchAllOrganizationApiHandler from '../../../OrganizationComponents/CreateOrganization/OrganizationApi/FetchAllOrganizationApiHandler';
import ProjectModal from '../../../ProjectComponents/ProjectModal';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';

import PropTypes from 'prop-types';
import Papa from 'papaparse';
import QrCodePdfDownload from './QrCodePdf';
import {
  Page,
  Text,
  View,
  Document,
  StyleSheet,
  Image,
  Link,
  PDFViewer, ReactPDF, PDFDownloadLink
} from "@react-pdf/renderer";
import QRCode  from 'qrcode';

const columns = [
    { id: 'name', label: 'Name', minWidth: 170 ,align:'center'},
    { id: 'group', label: 'Group', minWidth: 100, align:'center' },
    {
      id: 'project',
      label: 'Project',
      minWidth: 170,
      align: 'center',

    },
    {
      id: 'info',
      label: 'Info',
      minWidth: 170,
      align: 'center',
    },
    {
      id: 'status',
      type: 'button',
      label: 'Status',
      minWidth: 170,
      align: 'center',
    },
  ];
  
  function createData(projectName, registrationDate,numberofTracking, numberTracked,trackedCount,numberofDevice) {
    const density = projectName / 12;
    return { projectName, registrationDate,numberofTracking, numberTracked,trackedCount,numberofDevice };
  }
  
  const rows = [
    createData('ETTMS-V2-TEST', '2022-10-10 18:53:09', "9", "1","0","3"),
    createData('ETTMS-V3-TEST', '2022-10-10 18:53:09', "3", "7","2","2"),
    createData('ETTMS-V4-TEST', '2022-10-10 18:53:09', "5", "1","7","6"),
    createData('ETTMS-V5-TEST', '2022-10-10 18:53:09', "2", "2","1","3"),
    createData('ETTMS-V6-TEST', '2022-10-10 18:53:09', "7", "3","9","6"),
   
    
   
   
  ];

  const getDatePlease = (D) =>{
    return new Date(D).toLocaleString();
  }
  

const UserDashboardTable = () => {

    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(10);
    const [dashboardData, setDashboardData] = useState([]);
    console.log(dashboardData);
    const [anchorEl, setAnchorEl] = React.useState(null);
    const open = Boolean(anchorEl);
    const handleClick = (event) => {
      setAnchorEl(event.currentTarget);
      console.log(anchorEl);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };

    /* Create Track Id List In CSV Starts */
  const handleCreateTrackingIdList = async () => {
    // Make a GET request to the API
    const response = await fetch('http://localhost:3004/csv');
    const data = await response.json();
    console.log(data);
    // Convert the data into an array of objects
    // csv -> data
    const rows = data?.data?.map(item => {
      return {
        TrackID: item.trackId,
        DeviceVendor: item.deviceVendor,
        DeviceModel: item.deviceModel,
        DeviceSerial: item.deviceSerial,
        Memo: item.memo
      };
    });
    // Convert the array of objects into a CSV string
    const csv = Papa.unparse(rows);
    // Create a URL that points to the CSV string
    const url = window.URL.createObjectURL(new Blob([csv]));
    // Create a link that allows the user to download the CSV file
    const link = document.createElement('a');
    link.href = url;
    link.download = 'projectName'+'_TRACKID_LIST.csv';
    link.click();
  }
  /* Create Track Id List In CSV Ends */

  /* Create QR Code List In PDF Starts*/
  const [pdfData, setPdfData] = useState(null);
  const [renderePDF_link, setRenderePDF_link] = useState(false);
  const btnDownloadPDFAuto = useRef(null);
  let isButtonClicked = false;

  const handleAutoDownloadPDFCLIK = () => {
    if(!isButtonClicked) {
      console.log('Auto click worked', {
        btnProperty: btnDownloadPDFAuto.current
      });
      btnDownloadPDFAuto.current.click();
      isButtonClicked = !isButtonClicked;
      setTimeout(() => {
        setRenderePDF_link((prevvalue) => {
          if(prevvalue) {
            isButtonClicked = false;
            return false;
          }
        });
      }, 3000);
    }
  }

  // base64 String of qr code
  const convertToQRCode = (trackId) => {
    let track = trackId;
    QRCode.toDataURL(track, {
      width: 100,
      margin: 2
    }, (err, track) => {
      if (err) return console.error(err);
      console.log(`${trackId}`, track); // track id changed as qr code base64
      return track;
    })
  }
  const handleCreateTrackingQrCodeList = async () => {
    const response = await fetch('http://localhost:3004/qrCode');
    const _pdfData = await response.json();
    console.log(_pdfData);
    console.log("pdf result", {
      adecPDF_resultFtromAPI: response,
      _pdfData
    });
    setPdfData(_pdfData); // useState call

    // this function returns a base64string of qr code
    //convertToQRCode("1111");

    _pdfData?.data?.map(item => {
      console.log(convertToQRCode(item.trackId));
      localStorage.setItem(`${item.trackId}`, convertToQRCode(`${item.trackId}`));
    });

    setRenderePDF_link((prevvalue) => {
      setTimeout(() => {
        handleAutoDownloadPDFCLIK();
      }, 3000)
      return true;
    });
  }
  /* Create QR Code List In PDF Ends*/

    // useEffect( ()=>{
    //   const FetchData = async() =>{
    //     const response =  await FetchAllOrganizationApiHandler();
    //     console.log("organizatoin all data",response.body)
    //     setDashboardData(response.body);
        
    //   }
    //  FetchData()

    // },[])
  
    const handleChangePage = (event, newPage) => {
      setPage(newPage);
    };
  
    const handleChangeRowsPerPage = (event) => {
      setRowsPerPage(+event.target.value);
      setPage(0);
    };
    const handleDownload = () =>{
      alert("download hoito na !!!")
    }
  
  return (
    <>
    <Paper sx={{ width: '100%', overflow: 'hidden' }}>
      <div>
      {/* <Button variant="contained">Create Organization</Button> */}
    
      <ProjectModal/>
      </div>
       <TableContainer  sx={{ maxHeight: 345 }}>
      <Table  stickyHeader aria-label="sticky table">
        <TableHead>
          <TableRow>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Project Name</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Created At</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Number of Tracking ID</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Number Tracked</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Tracked Count</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Number of Device</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Action</TableCell>
            <TableCell  style={{backgroundColor: ' rgb(203, 200, 200)', fontWeight:'bold'}} align="center">Project Summary</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {rows.map((row) => (
            <TableRow
            data-row="data-row"
              key={row.projectName}
              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
            >
              <TableCell component="th" scope="row" align="center">
                {row.projectName}
              </TableCell>
              <TableCell align="center">{row.registrationDate}</TableCell>
              <TableCell align="center">{row.numberofTracking}</TableCell>
              <TableCell align="center">{row.numberTracked}</TableCell>
              <TableCell align="center">{row.trackedCount}</TableCell>
              <TableCell align="center">{row.numberofDevice}</TableCell>
              
                <TableCell align="center">
                <div>
      <Button
        id="basic-button"
        aria-controls={open ? 'basic-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        onClick={handleClick}
        variant="contained"
      >
        Action
        <ArrowDropDownIcon/>
      </Button>
      <Menu
        id="basic-menu"
        anchorEl={anchorEl}
        keepMounted
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'basic-button',
        }}
      >
        <div style={{display:'block'}}>

        <Button variant="contained" style={{margin:'10px',display:'block'}} 
        onClick={handleCreateTrackingIdList}>
          Creating Tracking ID List
        </Button>

        <Button variant="contained" style={{margin:'10px',display:'block'}} 
        onClick={handleCreateTrackingQrCodeList}>
          Creating Tracking QR Code List
        </Button>
          {
            renderePDF_link &&
              <PDFDownloadLink
                document={<QrCodePdfDownload/>}
                fileName={`projectName_MANAGE_QR_LIST.pdf`}>
                {
                  <Button ref={btnDownloadPDFAuto} onClick={handleAutoDownloadPDFCLIK}></Button>
                }
              </PDFDownloadLink>
          }
        <Button variant="contained" style={{margin:'10px',display:'block'}} onClick={handleClose}>Creating Tracking QR Tag</Button>
        </div>
      </Menu>
    </div>
   
                  </TableCell>
                  <TableCell align="center">
                    

   <Stack justifyContent="center" spacing={2} direction="row">
      <Button variant="contained" onClick={handleDownload}>Download</Button>
    </Stack>
                  </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
      <TablePagination
        rowsPerPageOptions={[10, 25, 100]}
        component="div"
        count={dashboardData.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
    </>
  )
}

export default UserDashboardTable

